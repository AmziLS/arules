<html><!-- #BeginTemplate "/Templates/tutorial_collections.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->

<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Data Tables and<br>
Pattern Matching Rules<!-- #EndEditable --></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<p><font size="-1"><b><a href="../../tutorial.htm" target=_top>Tutorial Index</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_01-02_rules_decision_tables.htm" target=_top>Rules &amp; Decision Tables</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_03_column_queries.htm" target=_top>Column Queries</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_04_property_arrays.htm" target=_top>Arrays</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_05_data_tables.htm">Tables &amp; Pattern Matching</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="collections_06_lists.htm" target=_top>Lists</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_07_vba.htm" target=_top>VBA</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_08_modules.htm" target=_top>Multiple Rule Sets</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_09_array_queries.htm" target=_top>Array Queries</a></b></font></p>
<hr>
<!-- #BeginEditable "body" --> 
<h3><i><a name="loans_05_data_tables"></a>loans_05_data_tables.xls</i></h3>
<p>In the previous examples, the inputs facts for RQuery() were entered in the 
  RQuery():</p>
<pre>=RQuery(ResaleRules, &quot;FIND Resell['Acme'] WHEN FICO = _1 AND LTV = _2 AND Occupancy = _3&quot;, D6, G6, F6)</pre>
<p>Another way to provide input facts is to make the rule set directly aware of 
  them. This is done using the function <var>RArray()</var>, which loads entire 
  arrays of data into a rule set.</p>
<p>The <code>RArray()</code> function is used inside of a rule set, and creates 
  an array of facts from a range of cells external to the rule set. The array 
  is stored as data in the rule set.</p>
  <p>For this example, the loan information will be read into a two-dimensional 
  array named <var>loans</var>. The array will be indexed by the row and column 
  headers on the spreadsheet, so we can refer directly to values such as <var>loans[102, 
  'LTV']</var>. </p>

<p> The default syntax for RArray() is:</p>
<pre>=RArray( FactName, ExcelRange ) </pre>
<p>The following figure illustrates the effect of <code>RArray()</code>:</p>
<p><img src="images/rtable_default.gif" width="505" height="436"><br>
  <b><font size="-1">Default RArray() Operation</font></b></p>
<p>Putting an <code>RArray()</code> function call in the ResaleRules rule set, 
  means rules can be written using the values from the array <var>loans</var>. 
  Instead of <var>FICO</var> being an input fact of an <code>RQuery()</code> for 
  loan #104, a rule can directly refer to <var>loans[104, FICO]</var>.</p>
<p>Now a rule set could have all of the resale rules written in it like this:</p>
<pre>resell['Ace', 101] = &quot;yes&quot; WHEN loans[101, FICO] &gt;= 720 AND loans[101, LTV] &gt;= 90
resell['Ace', 102] = &quot;yes&quot; WHEN loans[102, FICO] &gt;= 720 AND loans[102, LTV] &gt;= 90
<b>...</b>
resell['Ace', 115] = &quot;yes&quot; WHEN loans[115, FICO] &gt;= 720 AND loans[115, LTV] &gt;= 90 </pre>
<p>And <var>RQuery()</var> could ask about different loan ids:</p>
<pre>=RQuery(ResaleRules, &quot;FIND resell['Ace', 104]&quot;)</pre>
<p>But there is an easier way to write these rules.</p>
<p>ARulesXL supports pattern-matching variables that can be used to create pattern 
  rules that apply over fact arrays. A pattern-matching variable is indicated 
  by a leading <var>?</var> and applies for just the rule it is in.</p>
<p>The pattern rules below for the two investors in our example use the pattern-matching 
  variable <var>?id</var> which will have values like 101, 102, ..., 115. The 
  rules are:</p>
<pre>resell[Ace, ?id] = &quot;yes&quot; WHEN loans[?id, FICO] &gt;= 720 AND loans[?id, LTV] &gt;= 90
resell[Ace, ?id] = &quot;yes&quot; WHEN loans[?id, Occupancy] = &quot;Owner&quot; AND loans[?id, FICO] &gt;= 720 AND loans[?id, LTV] &gt;= 80
resell[Ace, ?id] = &quot;yes&quot; WHEN loans[?id, Occupancy] = &quot;Owner&quot; AND loans[?id, FICO] &gt;= 700 AND loans[?id, LTV]] &gt;= 90
resell[Ace, ?id] = &quot;no&quot;
     
resell[Acme, ?id] = &quot;yes&quot; WHEN loans[?id, FICO] &gt;= 680 AND loans[?id, Rate] &gt; 6.2 AND loans[?id, Occupancy] = &quot;Owner&quot;
resell[Acme, ?id] = &quot;yes&quot; WHEN loans[?id, FICO] &gt;= 700 AND loans[?id, Rate] &gt; 6.2 AND loans[?id, Occupancy] = &quot;2nd Home&quot;
resell[Acme, ?id] = &quot;no&quot; </pre>
<p>How does <var>?id</var> get a value? It gets a value when <code>RQuery()</code> 
  does a <var>FIND</var>. Consider this query:</p>
<pre>=RQuery(ResellRules, &quot;FIND resell[Acme, 103]&quot;)</pre>
<p>The ? variables are called pattern-matching variables because the goal in the 
  query, <var>resell[Acme, 103]</var>, is matched against the pattern facts for 
  resell in the rule set. Looking at the seven rules above, that query goal will 
  first match the 5th rule by giving <var>?id</var> the value 103.</p>
<p>If the conditions in the 5th rule aren't met using 103 for the value of ?id, 
  then the rule engine will match the pattern with the 6th rule, just as it does 
  for rules without pattern-matching variables.</p>
<p>The screen shot below shows these ideas at work with the following differences 
  from previous examples:</p>
<ul>
  <li><code>RArray()</code> is used to bring the loan data into the array <var>loans</var>. 
    (The actual cell output from <code>RArray()</code> is the informatory text 
    shown in the screen shot.)</li>
  <li>Pattern-matching decision tables, equivalent to the rules above, are used 
    to express the approval rules.</li>
  <li>The <code>RQuery()</code>s (see formula edit window below) now only take 
    the loan # as input, because the other input facts are already available to 
    the rule set in the array <var>loans</var>.</li>
</ul>
<p>&nbsp;</p>
<p><img src="images/collections_05_data_tables.gif" width="908" height="672"><br>
  <b><font size="-1">loans_05_data_tables.xls</font></b> </p>
<p>&nbsp;</p>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
