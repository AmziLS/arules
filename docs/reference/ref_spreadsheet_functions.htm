<html><!-- #BeginTemplate "/Templates/arulesxl.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>Reference - Spreadsheet Functions</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Reference<!-- #EndEditable --></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<p><font size="-1"><b><a href="../index.htm" target=_top>Top</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../install.htm">Installation</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../introduction.htm">Introduction</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../samples.htm">Samples</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="../tutorial.htm">Tutorial</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../reference.htm">Reference</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../release_notes.htm">Release Notes</a></b></font></p>
<hr>
<!-- #BeginEditable "body" --> 
<h2><a name="spreadsheet_functions"></a>Spreadsheet Functions</h2>
<p>These are the spreadsheet functions that are available in the ARulesXL add-in:</p>
<blockquote>
  <p><a href="#RQuery">RQuery()</a> &#8212; Queries a rule set. (Used outside a rule set) </p>
  <p><a href="#RCell">RCell()</a> &#8212; Loads a cell value into an property. (Used in a rule set) </p>
  <p><a href="#RTable">RArray()</a> &#8212; Loads multiple cell values into an array or list property. (Used in a rule set) </p>
  <p><a href="#RXLDependency">RXLDependency()</a> &#8212; Used with multiple rule sets to ensure they are synchronized with Excel. (Used in a rule set) </p>
</blockquote>
<h3><a name="RCell"></a>RCell( FactName, Cell )</h3>
<p>
  <!amzi_index=RCell()>
  RCell() is used in a rule set to load a single value into a single fact. 
  The <code>FactName</code> is the fact name of the new value. 
  The <code>Cell</code> is the location of the value. </p>
<p>For example: </p>
<pre>=RCell( &quot;part_discount&quot;, D8 )<br>=RCell( &quot;free_gift:&quot;, true )<br>=RCell( &quot;income['Q1']&quot;, C4 )</pre>
<h3><a name="RQuery"></a>RQuery( RuleSet, QueryText, Cell_1, ..., Cell_N )</h3>
<p>
  <!amzi_index=RQuery(); RXLDependency()>
  <code>RQuery()</code> is used in any spreadsheet cell and returns a fact value obtained 
  by querying a rule set.</p>
<p><var>RuleSet</var> can be:</p>
<ul>
  <li> a rule set name, or</li>
  <li>the address of another cell with an <code>RQuery()</code> in it.</li>
</ul>
<p>If <var>RuleSet</var> is a rule set name, then, because that name is also 
  the Excel range name for the rule set, the <code>RQuery()</code> will be recalculated whenever 
  there are changes to the rule set. The query is re-executed using <var>RuleSet</var> 
  as the default rule set for the FIND in the <var>QueryText</var>.</p>
<p>If <var>RuleSet</var> is the address of another cell with <code>RQuery()</code>, 
  then the query is recalculated whenever the other query is recalculated. In 
  this case, the query is executed without re-deriving intermediate results. In 
  other words, the query builds on whatever work was performed by the first query. 
  This is useful when you have multiple queries looking for additional information 
  from a prior query. Multiple <code>RQuery()</code>s can be chained together 
  using this technique.</p>
<p><var>QueryText</var> is a string with a query and embedded markers of the 
  form <var>Cell_N</var> which are replaced with the optional cell arguments. <var>_1</var> is replaced with the first cell argument, <var>_2</var> with 
  the second, etc.</p>
<p>The syntax of a query is:</p>
<pre>&quot;FIND Fact [IN RuleSet] [WHEN Fact1 = Value1 AND Fact2 = Value2 AND ...]&quot;</pre>
<p>The IN clause is optional and is used to specify a default rule set for the 
  query that is different from the one derived from the first argument of the 
  <code>RQuery()</code> function call.</p>
<p>The WHEN clause is optional and is used to set input values for other facts. 
  Any number of ANDs can be used to set additional fact values for the query.</p>
<p>Example, using a rule set to find a fact with no input facts (presumably 
  these are set directly in the rule set using <code>RCell()</code> or <code>RArray()</code>):</p>
<pre>=RQuery(LoanRules, &quot;find loan_status&quot;)</pre>
<p>Example using input values in the query and multiple rule sets specified in 
  a <code>RXLDependency()</code> function call:</p>
<pre>=RQuery(AllRules, &quot;FIND price WHEN part = widget and quantity = _1&quot;, C10)

AllRules
=RXLDependency(PriceRules, WidgetRules, PartRules)</pre>
<p>Example with explicit IN clause overriding the default:</p>
<pre>=RQuery(AllRules, &quot;FIND price in PriceRules WHEN part = widget and quantity = _1&quot;, C10)

AllRules
=RXLDependency(WidgetRules, PartRules, PriceRules)</pre>
<p>If there is a syntax error in the query, or a runtime error executing the query, 
  then <code>RQuery()</code> returns the text of the error message instead of a value for the 
  fact. </p>
<h3><a name="RTable"></a>RArray( FactName, Range, [hasRowHeaders], [hasColumnHeaders], [isVector])</h3>
<p>
  <!amzi_index=RArray()>
  <code>RArray()</code> is used in a rule set to load data from a 2-dimensional table or a 
  single vector into a rule set. The data can optionally have row and/or column 
  headers. If no headers are provided, the data is indexed numerically. The <code>FactName</code> is the name of the property that will hold the values. It will be referenced 
  with array indices. The <code>hasRowHeaders</code> and <code>hasColumnHeaders</code> parameters are optional and specify whether or not the table has row and/or 
  column headers. The last parameter, <code>isVector</code>, which is also optional, 
  specifies whether or not to use a column index when loading a single column 
  of data. </p>
<p>For example, given the table:</p>
<blockquote>
  <table border="1" cellpadding="2" cellspacing="0">
    <col width="89">
    <col width="64" span="4">
    <tr height="17">
      <td width="89" height="17" bgcolor="#CCCCCC">&nbsp;</td>
      <td width="64" bgcolor="#CCCCCC">Q1</td>
      <td width="64" bgcolor="#CCCCCC">Q2</td>
      <td width="64" bgcolor="#CCCCCC">Q3</td>
      <td width="64" bgcolor="#CCCCCC">Q4</td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Revenues</td>
      <td align="right">$100.00 </td>
      <td align="right">$120.00 </td>
      <td align="right">$140.00 </td>
      <td align="right">$190.00 </td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Expenses</td>
      <td align="right">$90.00 </td>
      <td align="right">$115.00 </td>
      <td align="right">$100.00 </td>
      <td align="right">$160.00 </td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Income</td>
      <td align="right">$10.00 </td>
      <td align="right">$5.00 </td>
      <td align="right">$40.00 </td>
      <td align="right">$30.00 </td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Taxes</td>
      <td align="right">$2.50 </td>
      <td align="right">$1.25 </td>
      <td align="right">$10.00 </td>
      <td align="right">$7.50 </td>
    </tr>
  </table>
</blockquote>
<p>This query loads the table using its row and column headers:</p>
<pre>=RArray(&quot;data&quot;, A1:E5, TRUE, TRUE)</pre>
<p>and will load properties and values like these:</p>
<pre>data['Revenues', 'Q1'] = 100<br>data['Income', 'Q4'] = 160<br>data['Taxes', 'Q2'] = 1.25  </pre>
<p>Note, you can load multiple tables into the same fact. For example:</p>
<pre>=RArray(&quot;data[2004]&quot;, A1:E5, TRUE, TRUE)<br>=RArray(&quot;data[2005]&quot;, G1:K5, TRUE, TRUE)<br>...</pre>
<p>essentially creates a 3-dimensional array with values like these:</p>
<pre>data[2004, 'Revenues', 'Q1'] = 100<br>data[2005, 'Income', 'Q4'] = 220      </pre>
<p>An asterisk (*) can be used for one dimension when referring to a table. The 
  value is an array/list of that row or column, no matter what dimension it is. 
  Using the previous .data examples, and assuming the 2005 Q2 Expense is 130:</p>
<pre>data[2004, 'Expenses', *] = [90, 115, 100, 160]
data[*, 'Expenses', 'Q2'] = [115, 130]
</pre>
<p>There are other ways to express multi-dimensional arrays:</p>
<table width="90%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td><pre>=RArray(&quot;pl_west_2004&quot;, A1:E5, TRUE, TRUE)</pre>    </td>
    <td><pre>pl_west_2004['Income', 'Q1'] </pre>    </td>
  </tr>
  <tr>
    <td><pre>=RArray(&quot;rpl['West', 2004] &quot;, A1:E5, TRUE, TRUE)</pre>    </td>
    <td><pre>rpl['West', 2004, 'Income', 'Q1'] </pre>    </td>
  </tr>
</table>
<p>To load the data without headers use:</p>
<pre>=RArray(&quot;data&quot;, B2:E5, FALSE, FALSE)</pre>
<p>which results in:</p>
<pre>data[1, 1] = 100<br>data[3, 4] = 160<br>data[4, 2] = 1.25  </pre>
<p>To load just a row of a table use:</p>
<pre>=RArray(&quot;data&quot;, B2:E2, FALSE, FALSE, TRUE) </pre>
<p>which loads these properties and values:</p>
<pre>data[1] = 100
data[2] = 120
data[3] = 140
data[4] = 190        </pre>
<p>To load this table of user inputs: </p>
<blockquote>
  <table border="1" cellpadding="2" cellspacing="0">
    <col width="110">
    <col width="63">
    <tr height="17">
      <td width="110" height="17" bgcolor="#CCCCCC">Price</td>
      <td align="right" width="63">10000</td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Loan Amount</td>
      <td align="right">8000</td>
    </tr>
    <tr height="17">
      <td height="17" bgcolor="#CCCCCC">Credit Rating</td>
      <td align="right">120</td>
    </tr>
  </table>
</blockquote>
<p>Use</p>
<pre>=RArray(&quot;input&quot;, A1:B3, TRUE, FALSE, TRUE)</pre>
<p>This loads the following properties and values:</p>
<pre>input['Price'] = 10000<br>input['Loan Amount'] = 8000<br>input['Credit Rating'] = 120</pre>
<p>Note, if the last parameter was FALSE, then the data would have been loaded 
  as:</p>
<pre>input['Price', 1] = 10000<br>input['Loan Amount', 1] = 8000<br>input['Credit Rating', 1] = 120</pre>
<h3><a name="RXLDependency"></a>RXLDependency( RuleSet_1, ..., RuleSet_N )</h3>
<p>
  <!amzi_index=RXLDependency()>
  <code>RXLDependency()</code> is used in a rule set to specify what other rule sets it depends upon for applications with multiple rule sets. Used as a function called in 
  a rule set, it ensures the rule sets are automatically synchronized with the rule 
  engine whenever changes occur in the rule set. </p>
<p><note>Note &#8212; RXLDependency() establishes spreadsheet dependencies 
  between rule sets and/or queries, allowing Excel recalculation to keep queries 
  and rule sets synchronized. RXLDependency() does NOT establish any logical relationships 
  between rule sets. Logical relationships are specified with explicit references 
  to other rule sets and/or the used of INHERIT FROM statements.</note> </p>
<p>The use of <code>RXLDependency()</code> is required when a query involves multiple 
  rule sets, either because:</p>
<ul>
  <li>The first rule set explicitly calls other rule sets; or</li>
  <li>The first rule set is a subset of other rule sets.</li>
</ul>
<p>Note that the rule set will be considered to have changed whenever an input 
  value to the rule set changes, as well as when changes are made directly to 
  the rule set.</p>
<p>Example:</p>
<pre>=RXLDependency(PriceRules, WidgetRules, PartRules)</pre>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <th width="100%" scope="col"><h4><a href="ref_spreadsheet_functions.htm" target="_blank">Open in New Window to Print</a></h4></th>
  </tr>
</table>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
