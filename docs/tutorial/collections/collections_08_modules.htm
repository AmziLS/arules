<html><!-- #BeginTemplate "/Templates/tutorial_collections.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->

<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Modular Investors<!-- #EndEditable --></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<p><font size="-1"><b><a href="../../tutorial.htm" target=_top>Tutorial Index</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_01-02_rules_decision_tables.htm" target=_top>Rules &amp; Decision Tables</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_03_column_queries.htm" target=_top>Column Queries</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_04_property_arrays.htm" target=_top>Arrays</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_05_data_tables.htm">Tables &amp; Pattern Matching</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="collections_06_lists.htm" target=_top>Lists</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_07_vba.htm" target=_top>VBA</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_08_modules.htm" target=_top>Multiple Rule Sets</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_09_array_queries.htm" target=_top>Array Queries</a></b></font></p>
<hr>
<!-- #BeginEditable "body" --> 
<h3><a name="loans_08_modules"></a>loans_08_modules.xls</h3>
<p>This example produces the same results as the sample introducing lists, but 
  instead of having all the rules in one rule set, the rules for each of the investors 
  are placed in their own rule sets. The main rule set, <var>ResaleRules</var>, 
  now contains rules that use the appropriate investor rule sets to get results.</p>
<p>The advantage of this approach is it makes it very easy to manage change and 
  complexity in investor rules. New investors can be easily added, and special 
  conditions for different investors are easily supported. Typically the rules 
  for each investor would be on their own worksheets, but in this example they 
  are all on one worksheet to illustrate the architecture.</p>
<p><img src="images/collections_08_modules.gif" width="1230" height="646"><br>
  <cite>loans_08_modules.xls</cite></p>
<p>There are a number of tasks in building this modular rule set application.</p>
<ul>
  <li><em>Create rule sets for each investor.</em> The names of the rule 
    sets are the names of the investors, in this case Ace and Acme.</li>
  <li><em>Create a main rule set</em>, ResaleRules, which both: <strong>provides 
    common rules/data</strong> for the individual investors; and <strong>dispatches 
    queries</strong> to appropriate investor rule sets.</li>
  <li><b>Establish Excel dependencies</b> between the main rule set and the individual 
    investor ones. This allows <code>RQuery()</code>s referring to the main rule 
    set to be re-executed when an investor rule set is modified.</li>
  <li><b>Establish inheritance relationships</b> between the investor rule sets 
    and the main one. This allows the investor rule sets to refer to rules and/or 
    data in the main rule set, in this case the <var>loans</var> array.</li>
</ul>
<p><strong>Common data</strong> in <var>ResaleRules</var> is provided with the 
  <code>RArray(&quot;loans&quot;, C5:G19)</code> function used in earlier examples. 
  It is placed in <var>ResaleRules</var> and can be used by any of the investor 
  rule sets.</p>
<p><strong>Dispatch queries</strong> are implemented using a rule in <var>ResaleRules</var> 
  that has an investor name as an index to the property. That investor name, which 
  is also a rule set name, is used in the goal syntax for querying a property 
  in a different rule set ( <var>RuleSet : Fact</var> ):</p>
<pre>Resell[ ?investor, ?id] = ?investor : Resell[?id]</pre>
<p>So, the <code>RQuery()</code> goal of <var>&quot;Resell['Acme', 303]&quot;</var> 
  will cause the sub goal <var>Acme: Resell[303]</var> to be pursued.</p>
<p><strong>Excel dependencies</strong> are established by placing <code>=RXLDependency( 
  RuleSet )</code> function calls inside the main rule set, <var>ResaleRules</var>. 
  <code>RXLDependency()</code> does nothing more than trigger Excel's dependency 
  mechanism, so that changes in an investor rule set will cause Excel to mark 
  <var>ResaleRules</var> as modified. This will cause <code>RQuery()</code>s which 
  refer to <var>ResaleRules</var> to be re-executed.</p>
<p><strong>Inheritance relationships</strong> are established with the statement 
  <var>Inherit from RuleSet</var>. When one rule set inherits from another, it 
  can directly refer to the properties of that rule set. For example, the <var>Ace</var> 
  rule set can refer to <var>loans[103, 'FICO']</var> as if it were defined in 
  <var>Ace</var>.</p>
<p>If a rule set does not inherit from another, it can still refer to properties 
  in other rule sets by using the <var>RuleSet : Fact</var> syntax. So if <var>Ace</var> 
  did NOT inherit from <var>ResaleRules</var>, it could still refer to <var>ResaleRules: 
  loans[103, 'FICO']</var>.</p>
<p><strong>Warning</strong> - Avoid circular definitions using either <code>RXLDependency()</code> 
  or <var>Inherit from RuleSet</var>. Typically, <code>RXLDependency()</code>s 
  go from top to bottom, and <var>Inherit from RuleSet</var> relationships go 
  from bottom to top.</p>
<p>These relationships are summarized in the following diagram.</p>
<p align="center"><img src="images/modular_rulesets.gif" width="740" height="520" border="0"><br>
  <cite>Modular Rule Set Architecture</cite></p>
<p>&nbsp;</p>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
