<html><!-- #BeginTemplate "/Templates/api.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>.NET Interface</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->C# and VB .NET Interface <!-- #EndEditable --><br><font size=4>Professional Edition</font></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<!-- #BeginEditable "body" --> 
<h2><a name="installation"></a>Installation</h2>
<p><b>
  <!amzi_index=VB;C#>
</b>The C# and VB .NET interfaces consist of 7 files.  The first 5 files can be found in the api\bin_redist directory.</p>
<ul>
  <li>arulesrt.cfg &#8212; The ARulesXL engine configuration file.</li>
  <li>arulesrt.dll, ar_mysqlrt.lsx, ar_osutilsrt.lsx, arulesrt.xpl &#8212;The ARulesXL engine</li>
  <li>arulesnet.dll  &#8212; The .NET wrapper for the ARulesXL engine (arules.dll) and Amzi! Logic Server interface. </li>
  <li>arulesxl.vb or ARulesXL.cs &#8212; The C# or VB class named ARulesXL and its methods. </li>
</ul>
<p>To use the .NET interface you need to:</p>
<ol>
  <li>Create a project in Visual Studio .NET. </li>
  <li>Add arulesnet.dll (from api\bin_redist) as a reference in your project.</li>
  <li>Add the existing file arulesxl.vb to your project's files. </li>
  <li>Put arulesrt.dll, ar_osutilsrt.lsx, ar_mysqlrt.lsx, arulesrt.xpl and arulesrt.cfg in a directory that is accessible to .NET and/or IIS (we recommend you use the bin subdirectory of your application). </li>
  <li>For IIS, you may need to add the directory you selected in the prior step to your system PATH environment variable using the Windows Control Panel. </li>
</ol>
<H3><A name="debugging_aspnet_problems"></A>Debugging ASP.NET Problems</H3>
<H4><a name="cannot_find_arulesnet"></a>Cannot find arulesnet.dll or one of its dependencies</H4>
<p><b>
  <!amzi_index=arulesnet>
</b>If you get the error that ASP.NET cannot find arulesnet or one of its   dependencies, it is likely because arulesnet.dll is not included as a reference in the project and copied to the bin subdirectory OR arules.dll (located in the Microsoft Office Library directory) is not on the system PATH environment variable. You must stop/restart IIS after modifying your PATH environment variable. </p>
<H4><a name="stop_restart_iis"></a>Stop/Restart IIS</H4>
<p>Also you might have to stop/restart IIS and/or use Task Manager to stop the   aspnet_wp process.</p>
<H4><a name="turn_on_aspnet_trace"></a>Turn on ASP.NET's Trace Facility</H4>
<p>In the Web.config file under trace set enabled="true" and   pageOutput="true"and if needed localOnly="false", e.g.</p>
<PRE>&lt;trace enabled="true" requestLimit="10" pageOutput="true" traceMode="SortByTime" localOnly="false" /&gt;</PRE>
<p>This will overlay debugging information onto the  each web page. You can also set pageOutput=&quot;false&quot; and then open trace.axd in your application directory, e.g. http://localhost/ARulesXLWeb/trace.axd.</p>
<H4><a name="run_under_visual_studio"></a>Run Under Visual Studio in Debug Mode</H4>
<p>To Debug under Visual Studio, in the Web.config file under compilation, set   Debug="true" as follows:</p>
<PRE>&lt;compilation defaultLanguage="vb" debug="true" /&gt;</PRE>
<p>and build the Debug version of the project. </p>
<p>To display ARulesXL's   ASP.NET Debug Log with the query answer set the ARULESXL_DEBUG constant in   AdviceForm.aspx.vb or AdviceForm.aspx.cs to True.</p>
<H4><a name="open_logic_server_trace"></a>Open an Amzi! Logic Server Trace File for Amzi! Tech Support</H4>
<p>If none of the above items do not make the problem clear, the next step is to   specify a log file in the arules.cfg file. To do this, add the following   lines to your arules.cfg file in the /bin subdirectory:</p>
<PRE>apitrace = on <BR>logfile = c:\arulesapi.log </PRE>
<h2><a name="apiadditionsandchanges"></a>API Additions  &amp; Changes </h2>
<h2><a name="usingtheamzilogicserver"></a>Using the Amzi! Logic Server </h2>
<p>The method <b>GetLS()</b> returns a LogicServer object that you can use with any of the  Logic Server methods as documented in the Amzi! Logic Server Reference Guide. </p>
<h2><a name="advicesample"></a>Advice  Samples</h2>
<p>These samples are built using Visual Studio .NET 2005 and version 2.0 of the .NET Framework. </p>
<h3><a name="vbnetapplication"></a>VB and C# .NET Application</h3>
<p>The advice VB and C# samples are simple .NET Windows applications. </p>
<h4><a name="buildingtheadvicesample" id="buildingtheadvicesample"></a>Building the Sample</h4>
<p>In order to run this sample: 
<OL>
  <LI>Open the 'Product Advice.xls' spreadsheet sample and select ARulesXL | Export from the main menu to export a file named 'advice.axl'.   
  <li>Copy advice.axl,  arulesrt.dll, ar_osutilsrt.lsx, ar_mysqlrt.lsx, arulesrt.xpl and arulesrt.cfg to the bin\Debug (or Release) subdirectory. </li>
  <LI>In Visual Studio, open advice.sln.   
  <LI>Select Project | Add Reference. Click on Browse and select arulesnet.dll in   the api\bin_redist subdirectory. Click OK.   
  <LI>Select Build | Rebuild Solution. </LI>
</OL>
<h4><a name="runningtheadvicesample"></a>Running the Sample</h4>
<OL>
  <LI>Select Debug | Start to run the sample. </LI>
</OL>
<h3><a name="iiswebapplication"></a>IIS Web Application  </h3>
<p>The advice_web VB and C# .NET sample is web-based and runs under the IIS Web Server. </p>
<h4><a name="buildingtheadvicewebsample" id="buildingtheadvicewebsample"></a>Building the Sample</h4>
<p>In order to run this sample you must have both IIS and Visual Studio .NET    installed. Follow these steps to create the ASP.NET application: 
<OL>
  <LI>In Visual Studio, select File | New | Web Site. 
  <LI>Select 'ASP.NET Web Site', select the language and change the location to http://localhost/advice.
  <LI>Select Project | Add Reference. Click on Browse and select arulesnet.dll in   the api\bin_redist subdirectory. Click OK.   
  <LI>Select File | Save All, then close Visual Studio.   
  <LI>Copy the files from the api\vb.net\samples\advice_web or api\cs.net\samples\advice_web directory to your InetPub\wwwroot\advice   subdirectory.   
  <li>Open the 'Product Advice.xls' spreadsheet sample and select ARulesXL | Export from the main menu to export a file named 'advice.axl'. </li>
  <li>Copy advice.axl,  arulesrt.dll, ar_osutilsrt.lsx, ar_mysqlrt.lsx, arulesrt.xpl and arulesrt.cfg to the InetPub\wwwroot\advice\bin subdirectory.  </li>
  <LI>Re-open Visual Studio and your advice project.   
  <LI>Select Build | Rebuild Solution. </LI>
</OL>
<h4><a name="runningtheadvicesample"></a>Running the Sample</h4>
<OL>
  <LI>Select Debug | Start to run the sample under IIS. </LI>
</OL>
<p>&nbsp;</p>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
