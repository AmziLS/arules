<html><!-- #BeginTemplate "/Templates/tutorial.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>Tutorial - Creating a Simple Rule Set &amp; Querying It</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Tutorial<br>
<font size=4>Creating a Simple Rule Set &amp; Querying It</font><!-- #EndEditable --></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<p><font size="-1"><b><a href="../index.htm" target=_top>Top</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../index_install.htm" target=_top>Installation</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../index_intro.htm" target=_top>Introduction</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../samples.htm">Samples</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="../index_tutor.htm" target=_top>Tutorial</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../index_ref.htm" target=_top>Reference</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="../release_notes.htm" target=_top>Release Notes</a></b></font></p>
<hr>
<!-- #BeginEditable "body" --> 
<h3><a name="rules"></a> Rules</h3>
<p> 
  <!amzi_index=Rules, Simple; Queries, Simple; Getting Started>
  Rules set values for facts when their conditions are met. The basic rule statement 
  is:</p>
<pre>Fact = Value WHEN Conditions</pre>
<p>A <em>fact</em> name is made up of letters, numbers and the underscore ( _ 
  ). It must start with a letter and cannot have embedded blanks.</p>
<p>A <em>value</em> is a number, text, or date-time. Text values need to be enclosed 
  in single or double quotes. Date-times are discussed later.</p>
<p><em>Conditions</em> is a boolean expression indicating when the fact takes 
  the value specified in the rule. Keywords AND and OR can be used to create complex 
  conditions.</p>
<p>For the first simple example we will consider two rules for setting the price 
  of some unit.</p>
<ul>
  <li>The unit price is 10 when the quantity ordered is &lt; 20</li>
  <li>The unit price is 8 when the quantity ordered is &gt;= 20</li>
</ul>
<p>In ARulesXL those rules can be expressed:</p>
<pre>UnitPrice = 10 When Quantity &lt; 20
UnitPrice = 8 When Quantity &gt;= 20</pre>
<h3><a name="rule_sets"></a>Rule Sets</h3>
<p> 
  <!amzi_index=Rule Sets; Reasoning Engine; Query; Find; RQuery()>
  A <em>rule set</em> is a named collection of rules. For the first example, the 
  name <code>PriceRules</code> will be given to the two rules above. Rule sets 
  can have any number of arbitrarily complex rules.</p>
<p>Rule set names must be valid range names in Excel. This means they cannot have 
  embedded blanks, and cannot be cell names. So A1 or BB24 are NOT valid rule 
  set names, nor is Price Rules.</p>
<p>Rules in rule sets are declarative, meaning the author of the rules does not 
  have to worry about the execution order of the rules. This is why rules are 
  so much easier to develop and read than procedural IF statements.</p>
<p>A <em>reasoning engine</em> makes the declarative rules possible. It dynamically 
  determines which rules apply based on varying input values.</p>
<p>To make use of a rule set, the reasoning engine is queried, much like a database 
  engine is queried to get answers from a database. The function <code>RQuery()</code> 
  is used in ARulesXL to pose queries. The simplest form is:</p>
<pre>=RQuery(RuleSetName, Query)</pre>
<p><em>RuleSetName</em> is the name of the rule set to be queried.</p>
<p><em>Query</em> is an Excel text string of the form:</p>
<pre>FIND Fact WHEN InputFact1 = Value1 AND InputFact2 = Value2 ...</pre>
<p>To find a unit price using the PriceRules rule set, this query would be entered 
  in a cell external to the rule set:</p>
<pre>=RQuery( PriceRules, &quot;FIND UnitPrice WHEN Quantity = 25&quot;)</pre>
<h3><a name="implementing_the_example"></a>Implementing the Example</h3>
<ol>
  <li>Widen the A column and select cells A1 to A4 in the spreadsheet.</li>
  <li>From the main menu select <b>ARulesXL | New Ruleset...</b></li>
  <li>When prompted, enter the name <code>PriceRules</code>, and check the range 
    for the new rule set </li>
  <li>The name will appear in A1 and a border will appear around the cells indicating 
    the end of the range.</li>
  <li>Type these two rules in A2 and A3:
    <pre>UnitPrice = 10 when Quantity &lt; 20
UnitPrice = 8 when Quantity &gt;= 20</pre></li>
  <li>From the ARulesXL menu or the right mouse menu select <em>Load Modified 
    Rules</em>. This loads the rules into the ARulesXL reasoning engine.</li>
</ol>
<p>Next, call the rule query function, RQuery(), in cell A6.</p>
<pre>=RQuery( PriceRules, &quot;Find UnitPrice when Quantity = 25&quot;)</pre>
<p>The result, <code>8</code>, should appear in the cell. The spreadsheet should 
  look like:</p>
<p align="center"><img src="../images/Tutorial%2001.gif" width="524" height="159"></p>
<p>This simple example illustrates a number of points about ARulesXL:</p>
<ul>
  <li>Rules are defined in Excel ranges which become ARulesXL rule sets.</li>
  <li>The first cell in the range contains the name of the rule set.</li>
  <li>A rule is constructed with an action on the left, the key word WHEN, and 
    conditions on the right.</li>
  <li>The rules set and test facts. </li>
  <li>The rule sets are queried with the function <code>RQuery()</code>. The first 
    argument is the rule set name. The second argument is a request to find the 
    value of a fact when other fact values are optionally input.</li>
</ul>
<p><strong><b>Note</b> - The rules and queries are NOT case sensitive, so <code>UnitPrice</code> 
  and <code>unitprice</code> are equivalent.</strong></p>
<h3><a name = "order_of_rules"></a>Order of Rules</h3>
<p> 
  <!amzi_index=Rule Order; Order, Rules>
  Rules for different facts can be put in any order in a rule set. The reasoning 
  engine uses indexes to find them when needed.</p>
<p>Rules for the same fact, <var>UnitPrice</var> in our example, can also be put 
  in any order as long as they are not ambiguous. If there are multiple rules 
  which are both possible, then the first rule which fits will be used.</p>
<p>The two <code>UnitPrice</code> rules in the example are both coded with conditions 
  that exclude each other, so it doesn't matter which order they appear in. Knowing 
  the order, however, lets you omit the conditions on the second rule, knowing 
  it will only be tried if the first rule fails:</p>
<pre>UnitPrice = 10 WHEN Quantity &lt; DiscountQuantity
UnitPrice = 8</pre>
<p>While this is probably poor style for the example, it can be a useful technique 
  for setting a default value for a fact by having the last rule for the fact 
  simply set the value.</p>
<h3><a name="syntax_checking"></a>Syntax Checking</h3>
<p> 
  <!amzi_index=Syntax Checking>
  ARulesXL automatically checks the syntax of your rules. To try this in <code>PriceRules</code> 
  make a syntactic error by deleting the = after <code>UnitPrice</code> in cell 
  A3.</p>
<p>The syntax check will set a comment on each cell indicating the nature of the 
  error. To get the error message, click on the small triangle in the upper left 
  corner of the cell. This is what it looks like for this error:</p>
<p align="center"><img src="../images/Tutorial%2001a.gif" width="456" height="148"></p>

<h3><a name = "other_tools"></a>Resizing, Renaming and Removing Rule Sets </h3>
<p> 
  <!amzi_index=Delete Rule Sets;Remove Rule Sets;Rename Rule Sets;Resize Rule Sets>
  If you want to change the size of a rule set, simply insert more rows and/or 
  columns into the range with the Excel <b>Insert</b> command.</p>
<p>If you want to delete a rule set, highlight all the cells in the rule set and 
  select <b>ARulesXL | Remove Rule Set</b>. This turns the contents of the cells 
  in the rule set range into plain text. You can convert them back to a rule set 
  by selecting the cells and using the <b>ARulesXL | New Rule Set...</b> command. 
</p>
<p>To rename a ruleset, just edit the rule set name at the top of the rule set. 
  You will need to change any <code>RQuery()</code> functions that used the old 
  ruleset name. </p>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <th width="50%" scope="col"> 
      <div align="left"> 
        <h3><a href="../tutorial.htm">Previous</a></h3>
      </div>
    </th>
    <th width="50%" scope="col"> 
      <div align="right"> 
        <h3><a href="tutor_decision_tables.htm">Next</a></h3>
      </div>
    </th>
  </tr>
  <tr> 
    <th colspan="2" scope="col"> 
      <h4><a href="../tutorial.htm" target="_blank">Open in New Window 
        to Print</a></h4>
    </th>
  </tr>
</table>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
