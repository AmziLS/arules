<html><!-- #BeginTemplate "/Templates/tutorial_collections.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>Array Queries</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Array Queries<!-- #EndEditable --></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<p><font size="-1"><b><a href="../../tutorial.htm" target=_top>Tutorial Index</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_01-02_rules_decision_tables.htm" target=_top>Rules &amp; Decision Tables</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_03_column_queries.htm" target=_top>Column Queries</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_04_property_arrays.htm" target=_top>Arrays</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_05_data_tables.htm">Tables &amp; Pattern Matching</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="collections_06_lists.htm" target=_top>Lists</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_07_vba.htm" target=_top>VBA</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_08_modules.htm" target=_top>Multiple Rule Sets</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="collections_09_array_queries.htm" target=_top>Array Queries</a></b></font></p>
<hr>
<!-- #BeginEditable "body" --> 
<h3><a name="loans_09_array_queries"></a>loans_09_array_queries.xls</h3>
<p>This example introduces some more complexity to the modular rule sets for investors. 
  In addition to giving a yes/no decision on resale; the rules will also compute 
  a price adjustment the investor might require for a given loan.</p>
<p>The required output is now a new table of resaleable loans with columns for 
  loan ids, price adjustment, and investor, as shown in the screen shot.</p>
<p><img src="images/collections_09_array_queries.gif" width="1208" height="586"><br>
  <cite>loans_09_array_queries.xls</cite></p>
<p>Each investor rule set already had a property <var>Resell[?id]</var> that provides 
  the <var>&quot;yes&quot;/&quot;no&quot;</var> decision. The new investor rule 
  sets will add a new property <var>RateAdjust[?id]</var> which will have the 
  adjustment for that vendor.</p>
<h3><a name="modelling_cumulative_rate_adjustment"></a>Modelling Cumulative Rate 
  Adjustment Rules</h3>
<p>Note that the key to the modular rule set architecture is that each investor 
  rule set has some properties which are intended to be called from the main dispatch 
  rule set. These have the same names in each investor rule set. Now the main 
  rule set can have as a goal: <var>?investor : RateAdjust[?id]</var>.</p>
<p>The level of complexity of rate adjustment is different for the two vendors. 
  For <var>Acme</var>, it is always <var>0.75</var>.</p>
<p>For <var>Ace</var>, the adjustment rules are:</p>
<ul>
  <li>If the loan is not owner occupied add 1.00 to the rate adjustment.</li>
  <li>If the loan has a FICO less than 730 add 0.75 to the rate adjustment.</li>
  <li>By default, there is no rate adjustment.</li>
</ul>
<p>Note that the rules are cumulative. Array rules let us model the factors:</p>
<pre>Adjust[Occupancy, ?id] = 1 WHEN loans[?id, 'Occupancy'] &lt;&gt; &quot;Owner&quot;
Adjust[FICO, ?id] = 0.75 WHEN loans[?id, 'FICO'] &lt; 730
Adjust[?, ?] = 0</pre>
<p>This way, the different factors can be referenced independently, and any factor 
  can have as many rules or as much complexity as is necessary. The last rule 
  has ? without any text. These are variables for which a value is unimportant. 
  The last rule says: <i>if you get to this rule (no other rules applied), then 
  for any factor and any loan id, the value is 0.</i></p>
<p>The advantage of writing the rules this way is that a general purpose collection 
  rule can be used to gather up the factors and add them together. More and different 
  factors can be added, but the general purpose rule will still work.</p>
<pre>RateAdjust[?id] = SUM( COLLECT( ?adj,
    ?factor = INDEX( Adjust, 1),
    ?adj = Adjust[?factor, ?id] ) )</pre>
<p>The <var>INDEX()</var> function is used just as it is for data tables. In this 
  case it picks up all the explicit first indices for <var>Adjust</var>, which 
  will be <var>Occupancy</var> and <var>FICO</var>. Each factor is then used to 
  get the adjustment, <var>?adj</var>, for that factor. <var>COLLECT()</var> gathers 
  up the adjustments in a list. <var>SUM()</var> adds the values in the list.</p>
<h3><a name="creating_the_output_array"></a>Creating the Output Array of Data</h3>
<p>Next, look at the collection rule in the main rule set <var>ResaleRules</var>. 
  The required output is an array with columns for loan id, adjustment and investor. 
  This is constructed as a list of lists, where the inner lists have the three 
  desired elements. So the first argument to <var>COLLECT()</var> is <var>[?id, 
  ?adjust, ?investor]</var>.</p>
<p>The output array will have one row for each loan id and each investor for that 
  loan. This means generating the output requires looping through both the loan 
  ids and the investors. To loop through the investors first create a list with 
  the investor names:</p>
<pre>Investors = ['Ace', 'Acme']</pre>
<p>Now the <var>FOREACH</var> argument of <var>COLLECT()</var> can loop through 
  loans and investors: <var>( ?id = INDEX(loans, 1) AND ?investor = MEMBER( Investors 
  ) )</var></p>
<p>The conditions of <var>COLLECT()</var> are that the loan be resaleable for 
  that investor, and if so, <var>?adjust</var> is the adjustment: <var>( ?investor 
  : Resell[?id] = &quot;yes&quot; AND ?adjust = ?investor : RateAdjust[?id] )</var></p>
<p>One last touch is that the lists be sorted, so that for loan ids with more 
  than one investor, they are in order of smallest adjustment first. This is what 
  the collection rule looks like:</p>
<pre>ResaleInfo = SORT( COLLECT( [?id, ?adjust, ?investor],
   ( ?id = INDEX( loans, 1) AND ?investor = MEMBER( Investors ) ),
   ( ?investor : Resell[?id] = &quot;yes&quot; AND ?adjust = ?investor : RateAdjust[?id] ) ) )</pre>
<p>Before trying to create an Excel array from the output, it is a good idea to 
  try the query as a single cell value to see what the results look like.</p>
<p><img src="images/collections_09b.gif" width="1032" height="105"><br>
  <cite>Lists of lists used to fill an array</cite></p>
<p>In the screen shot above, the result is a list of lists as required. And each 
  list has three elements, as required.</p>
<p>The <var>ResaleInfo</var> property could be queried from VBA, and VBA used 
  to format the output as described in the previous section. Or Excel array function 
  techniques can be used.</p>
<h3><a name="formatting_excel_array"></a>Formatting an Excel Array</h3>
<p>Excel supports array functions. If a function is called from within a range 
  of cells, and the function is entered using Ctrl-Shift-Enter, and the function 
  returns an array, then Excel will populate the cells in the range with the values 
  from the array.</p>
<p><code>RQuery()</code> knows when it is called as an array function. In that 
  case, if the answer is a list or list of lists, it formats the lists into a 
  VBA array so excel can display the results in a range of cells.</p>
<p>That is exactly what is done in the screen shot at the beginning of this chapter, 
  and how the above list winds up in a nicely formatted Excel table. Note in the 
  formula window in the first screen shot the query is displayed in curly braces 
  { }. This indicates that it is an array query.</p>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
