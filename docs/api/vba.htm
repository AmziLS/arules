<html><!-- #BeginTemplate "/Templates/api.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>VBA and VB6 Interface</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->VBA &amp; VB6 Interface <!-- #EndEditable --><br><font size=4>Professional Edition</font></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<!-- #BeginEditable "body" --> 
<h2><a name="installation"></a>Installation</h2>
<p><b>
  <!amzi_index=VBA>
</b>The VBA/VB6 interface allows two different types of applications. </p>
<ol>
  <li>Using the ARulesXL add-in you can write macros/commands that call query functions and then display the results in a form specific to your application. The sample, 'Budget Analysis.xls', does this to highlight the parts of the profit and loss statement that are not meeting expectations.</li>
  <li>Using the ARulesXL API from VBA in any application or VB6, you can load exported rule sets, add data and perform queries. </li>
</ol>
<p><note>Note &#8212; If you want to run rule sets in Excel and prevent users from changing and/or viewing your rules, see the <a href="excel.htm">Runtime Excel Add-In</a>.</note></p>
<h2><a name="apiadditionsandchanges"></a>API Additions  &amp; Changes </h2>
<p>These functions are only available in ARulesXL Add-in for Excel:</p>
<ul>
  <li>VBARQuery</li>
  <li>VBARQueryMore</li>
  <li>VBARArrayQuery</li>
</ul>
<p>The standard ARulesXL API functions are available  outside of the add-in: </p>
<ul>
  <li>OpenRules</li>
  <li>CloseRules</li>
  <li> ClearTable</li>
  <li> ClearVector</li>
  <li> AddToTable</li>
  <li> AddToVector</li>
  <li> AddObject </li>
  <li>GetLS</li>
</ul>
<h3><a name="VBARQuery"></a>VBARQuery</h3>
<p><b>
  <!amzi_index=VBARQuery>
Description:</b></p>
<p> Function VBARQuery(
RuleSet As Range, 
QueryText As String, 
ParamArray Cell_1_to_N() As Variant) As Variant</p>
<DL>
  <DT>RuleSet   
  <DD>The Excel Range object where the rule set is located
  <dt>QueryText  </dt>
  <DD> The query to run in the same format as is used for <a href="../reference.htm#RQuery">RQuery()</a>
  <DT>Cell_1_to_N()<DD> The array of arguments to the query 
</DL>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>Queries the named ruleset and returns the result. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>The result of the query, which can be an integer, floating point number, string or array. You can use the <a href="../reference/ref_rule_functions.htm#general">RANGE()</a> function in your rules to return where your RArray() and RCell() data are located. </p>
  <p>Returns an error message on failure. </p>
</BLOCKQUOTE>
<p><B>Example:</B></p>
<UL>
  <PRE>Set rules = Range(&quot;BudgetRules&quot;)<br>    <br>' This is a simple example picking up a dimension to highlight<br>' from the rule.<br>result = Application.Run(&quot;ARulesXL.xla!VBARQuery&quot;, rules, &quot;FIND HighLight&quot;)<br>Range(result).Interior.ColorIndex = 3  </PRE>
</UL>
 <h3><a name="VBARQueryMore"></a>VBARQueryMore</h3>
 <p><b>
   <!amzi_index=VBARQueryMore>
   Description:</b></p>
 <p> Function VBARQueryMore(
   RuleSet As Range, 
   QueryText As String, 
   ParamArray Cell_1_to_N() As Variant) As Variant</p>
 <DL>
   <DT>RuleSet   
   <DD>The Excel Range object where the rule set is located
   <dt>QueryText </dt>
   <DD> The query to run in the same format as is used for <a href="../reference.htm#RQuery">RQuery()</a>
   <DT>Cell_1_to_N()
   <DD> The array of arguments to the query 
</DL>
 <p><B>Remarks:</B> </p>
 <BLOCKQUOTE>
   <p>Queries the named ruleset using results derived during prior queries and returns the result. </p>
 </BLOCKQUOTE>
 <p><B>Return Value:</B> </p>
 <BLOCKQUOTE>
   <p>The result of the query, which can be an integer, floating point number, string or array. You can use the <a href="../reference/ref_rule_functions.htm#general">RANGE()</a> function in your rules to return where your RArray() and RCell() data are located. </p>
   <p>Returns an error message on failure. </p>
 </BLOCKQUOTE>
 <p><B>Example:</B></p>
 <UL>
   <PRE>Set rules = Range(&quot;BudgetRules&quot;)<br>    <br>' This is a simple example picking up a dimension to highlight<br>' from the rule.<br>result = Application.Run(&quot;ARulesXL.xla!VBARQueryMore&quot;, rules, &quot;FIND HighLight&quot;)<br>Range(result).Interior.ColorIndex = 3 </PRE>
 </UL>
 <h3><a name="VBARArrayQuery"></a>VBARArrayQuery</h3>
 <p><b>
   <!amzi_index=VBARArrayQuery>
 Description:</b></p>
 <p>Function RArrayQuery( RuleSet As Range, First As Boolean, QueryText As String, 
ParamArray  Cell_1_to_N() As Variant) As Variant</p>
 <DL>
   <DT>RuleSet   
   <DD>The Excel Range object where the rule set is located
   <dt>First</dt>
   <dd>Specifies whether this is a first time query, or to use derived values from previous queries</dd>
   <dt>QueryText </dt>
   <DD> The query to run in the same format as is used for <a href="../reference.htm#RQuery">RQuery()</a>
   <DT>Cell_1_to_N()
   <DD> The array of arguments to the query 
</DL>
 <p><B>Remarks:</B> </p>
 <BLOCKQUOTE>
   <p>Queries the named ruleset and returns the result as a VBA array. You can call VBARQuery() just a from a cell, and it returns a variant.
But, VBARQuery() doesn't know whether to format arrays as strings or arrays
 when called from VBA.  So you can call VBARArrayQuery(), just like VBARQuery(),
 and know that it will return arrays formatted as arrays.</p>
</BLOCKQUOTE>
 <p><B>Return Value:</B> </p>
 <BLOCKQUOTE>
   <p>The result of the query as a VBA array.</p>
   <p>Returns an error message on failure. </p>
 </BLOCKQUOTE>
 <p><B>Example:</B> </p>
 <UL>
   <PRE>' Pick up the range of the rule set.
Set rules = Range("BudgetRules")
   
' The second boolean argument is whether or not this is a first time query
' or will use derived results from a previous query.
result = Application.Run("ARulesXL.xla!VBARArrayQuery", rules, True, "FIND analysis")

' Since we expect an array, a string is an error message.
vt = VarType(result)
If vt = vbString Then
    MsgBox "Error: " & result
Else
' The array contains the cells and comments indicating problems.  Annotate
' the spreadsheet with each.
    For i = LBound(result) To UBound(result)
        Range(result(i, 1)).Interior.Color = vbYellow
        Range(result(i, 1)).AddComment (result(i, 2))
    Next i
End If
</PRE>
 </UL>
 <h2><a name="usingtheamzilogicserver"></a>Using the Amzi! Logic Server </h2>
<p>The VB6/VBA interface to the Amzi! Logic Server is part of the ARulesXL add-in. You can call the procedures and functions in that interface as documented in the Amzi! Logic Server Reference Guide. </p>
<h2><a name="sample"></a>Samples</h2>
<h3><a name="vba"></a>ARulesXL Add-In Macro/Command Sample </h3>
<p>Open the 'Budget Analysis.xls' sample spreadsheet. A 'Budgets' menu will appear in Excel. You can use it to run the analyses. To see how the commands are implemented, use Tools | Macro | Visual Basic Editor to open the PLFunctions Module. </p>
<h3><a name="vb6"></a>VB6 Advice </h3>
<p>In order to run this sample: 
<OL>
  <LI>Open the 'Product Advice.xls' spreadsheet sample and select ARulesXL | Export from the main menu to export a file named 'product_advice.axl'.   
  <li>Copy product_advice.axl,  arulesrt.dll, ar_osutilsrt.lsx, ar_mysqlrt.lsx, arulesrt.xpl and arulesrt.cfg to the same directory with the source code. </li>
  <LI>In VB6, open advice.vbw.   
  <LI>Add arules.bas and arulesxl.cls to the project (from the vb6_vba directory). 
  <LI>Build advice.exe and run it.   
</OL>
<p>&nbsp;   </p>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
