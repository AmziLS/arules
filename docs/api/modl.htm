<html><!-- #BeginTemplate "/Templates/api.dwt" --><!-- DW6 -->
<!-- saved from url=about:internet -->
<head>
<link rel="stylesheet" type="text/css"
href="../arulesxl.css" />
<!-- #BeginEditable "doctitle" -->
<title>Extend MODL Interface</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000033" link="#990066" vlink="#990099" alink="#9900FF">
<table width=100%>
<tr>
<td><h1><!-- #BeginEditable "head" -->Extend MODL  Interface <!-- #EndEditable --><br><font size=4>Professional Edition</font></h1></td>
    <td><a href="http://www.arulesxl.com" target="_top"><img src="../images/logo.gif" width="150" height="115" border="0" align="right"></a></td>
</tr>
</table>
<hr>
<!-- #BeginEditable "body" --> 
<h2><a name="installation"></a>Installation</h2>
<p><b>
  <!amzi_index=Extend;MODL;arulesmodl>
</b>The Extend MODL is used to add reasoning capabilities to Extend models. It  consists of 6 files. The first 5 files are in the arulesxl\api\bin_redist directory. The last 2 files are in the arulesxl\api\modl directory.</p>
<ul>
  <li>arulesrt.cfg &#8212; The ARulesXL engine configuration file.</li>
  <li>arulesrt.dll, ar_mysqlrt.lsx, ar_osutilsrt.lsx, arulesrt.xpl &#8212;The ARulesXL engine</li>
  <li>arulesmodl.dll  &#8212; The interface DLL between MODL and ARulesXL. </li>
  <li>arules.h  &#8212; The include file for the MODL interface that is included into a library.</li>
</ul>
<p>To use the MODL interface, put all of the above files in the Extend\extensions directory. </p>
<h2><a name="apiadditionsandchanges"></a>API Additions  &amp; Changes </h2>
<p>MODL uses the Extend DLL application programming interface (API). As a result, the API calls differ in these ways:</p>
<ul>
  <li>InitRules() must be called once before any calls to OpenRules(). </li>
  <li>Every function except OpenRules() takes an ARulesXL identifier as the first parameter. (OpenRules() returns that identifier.) </li>
  <li> All of the functions  return an integer  error code where 0 means no error and any other value describes the error. </li>
  <li>Parameters are not overloaded, so there is one function for each data type instead of a single function that accepts different data types as parameters. For example, instead of the AddObject() function, there are AddDoubleObject(), AddLongObject() and AddStringObject(). </li>
</ul>
<h3><a name="error_codes"></a>Error Codes</h3>
<p>The most common error codes are:</p>
<ul>
  <li>205 Value is not a string </li>
  <li>206 Value is not an integer/long </li>
  <li>207 Value is not a floating point/double </li>
  <li>211 Value is not a list </li>
</ul>
<p>These error codes usually occur when calling QueryRulesTo___ and the result of the query does not match the type returned by the function. You can test your queries directly in Excel using <code>RQuery()</code>. Alternatively, you can enable tracing in the arulesrt.cfg file. To do this remove the pound sign (#) in front of these lines:</p>
<pre>apitrace = on<br>logfile = c:\arulestrace.log   </pre>
<p>If you look in the log file you will see the queries and the results returned. </p>
<h3><a name="AddObject"></a>AddObject</h3>
<p><b>Description:</b></p>
<p> integer AddDoubleObject(long arxl, string ruleset, string objectname, double value)<br>
integer AddLongObject(long arxl, string ruleset, string objectname, long value)<br>
integer AddStringObject(long arxl, string ruleset, string objectname, string value)</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#AddObject">AddObject()</a> </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. </p>
</BLOCKQUOTE>
<h3><a name="AddObject"></a>AddToTable</h3>
<p><b>Description:</b></p>
<p> integer AddDoubleToTable(long arxl, string ruleset, string objectName, string rowname, string colname, double value)<br>
  integer AddLongToTable(long arxl, string ruleset, string objectName, string rowname, string colname, long value)<br>
  integer AddStringToTable(long arxl, string ruleset, string objectName, string rowname, string colname, string value)</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#AddToTable">AddToTable()</a> </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. </p>
</BLOCKQUOTE>
<h3><a name="AddObject"></a>AddToVector</h3>
<p><b>
  <!amzi_index=AddDoubleToVector; AddLongToVector; AddStringToVector>
Description:</b></p>
<p> integer AddDoubleToVector(long arxl, string ruleset, string objectname, string rowname, double value)<br>
  integer AddLongToVector(long arxl, string ruleset, string objectname, string rowname, long value)<br>
  integer AddStringToVector(long arxl, string ruleset, string objectname, string rowname, string value)</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#AddToVector">AddToVector()</a> </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. </p>
</BLOCKQUOTE>
<h3><a name="InitRules"></a>InitRules</h3>
<p><b>
  <!amzi_index=InitRules>
Description:</b></p>
<p> InitRules() </p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>InitRules() must be called before OpenRules(), and initializes the ARulesXL module by loading external code in DLLs. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>None.</p>
</BLOCKQUOTE>
<h3><a name="AddToVector"></a>LoadVectorFromArray</h3>
<p><b>
  <!amzi_index=LoadVectorFromDoubleArray; LoadVectorFromLongArray>
Description:</b></p>
<p>integer LoadVectorFromDoubleArray(long arxl, string ruleset, string objectname, double values[])<br>
integer LoadVectorFromLongArray(long arxl, string ruleset, string objectname, long values[])</p>
<DL>
  <DT>arxl</DT>
  <DD>The ARulesXL identifier from OpenRules </DD>
  <DT></DT>
  <DT>ruleset</DT>
  <DD>The name of the ruleset where the table fact is defined</DD>
  <DT></DT>
  <DT>objectname</DT>
  <DD> The name of the fact</DD>
  <DT>values</DT>
  <DD> A single-dimension array containing the data to add</DD>
</DL>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>Replaces all  data in a new or existing vector (a one-dimensional table) with the values given. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. </p>
</BLOCKQUOTE>
<p><B>Example:</B> </p>
<UL>
  <PRE>double ar[3];
integer arxl;
integer rc;
<br>InitRules();<br>arxl = OpenRules(&quot;c:\Extend6LT\pricing.axl&quot;, &quot;C:\Extend6LT\Extensions\&quot;);<br>ar[0] = 1;<br>ar[1] = 2.345;<br>ar[2] = 0.345678e20;<br>rc = LoadVectorFromDoubleArray(arxl, &quot;PriceRules&quot;, &quot;ar&quot;, ar);</PRE>
</UL>
<h3><a name="OpenRules"></a>OpenRules</h3>
<p><b>Description:</b></p>
<p>long OpenRules(string rulesetfile, string arulespath)  </p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#OpenRules">OpenRules()</a>.</p>
  <p>InitRules() must be called before OpenRules().</p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>The  ARulesXL identifier that is passed to all subsequent functions. </p>
</BLOCKQUOTE>
<h3><a name="QueryRules"></a>QueryRules</h3>
<p><b>
  <!amzi_index=QueryRulesToDouble; QueryRulesToLong>
Description:</b></p>
<p> integer QueryRulesToDouble(long arxl, string ruleset, string query, double out[])<br>
  integer QueryRulesToLong(long arxl, string ruleset, string query, long out[])</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#QueryRules">QueryRules()</a>. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. The last parameter is an array of length 1 where the result of the query is returned. </p>
</BLOCKQUOTE>
<h3><a name="QueryRulesToVector"></a>QueryRulesToVector</h3>
<p><b>
  <!amzi_index=QueryRulesToDoubleVector; QueryRulesToLongVector>
Description:</b></p>
<p>integer QueryRulesToDoubleVector(long arxl, string ruleset, string query, long count[], double out[])<br>
integer QueryRulesToLongVector(long arxl, string ruleset, string query, long count[], long out[])</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#QueryRules">QueryRules()</a>. </p>
  <p>Returns a list of values from a query into a double or long array. Will return all the items in the list if the array is large enough to contain them, otherwise just fills the array. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success. The count parameter is an array of length 1 where the number of items in the list is returned. The out parameter is an array where the values of the list are returned in order. </p>
</BLOCKQUOTE>
<h3><a name="QueryMore"></a>QueryMore</h3>
<p><b>
  <!amzi_index=QueryMoreToDouble; QueryMoreToLong>
Description:</b></p>
<p> integer QueryMoreToDouble(long arxl, string ruleset, string query, double out[])<br>
integer QueryMoreToLong(long arxl, string ruleset, string query, long out[])</p>
<p><B>Remarks:</B> </p>
<BLOCKQUOTE>
  <p>See <a href="api.htm#QueryMore">QueryMore()</a>. </p>
</BLOCKQUOTE>
<p><B>Return Value:</B> </p>
<BLOCKQUOTE>
  <p>An error code, where 0 means success.  The last parameter is an array of length 1 where the result of the query is returned. </p>
</BLOCKQUOTE>
<h2><a name="sample"></a> Sample</h2>
<h3><a name="buildingthesample"></a>Building the Sample</h3>
<p>Before running the sample, you need to create and copy files into the Extend program directories: </p>
<ol>
  <li>In the api\modl\samples\pricing directory, open 'PhoneCallPricing.xls' in Excel. Select ARulesXL | Export to create phonecallpricing.axl. Copy that file to your Extend\Extensions directory. </li>
  <li>Copy 'ARulesXLDemo.lix' to your Extend\Libraries directory. </li>
</ol>
<h3><a name="runningthesample"></a>Running the Sample</h3>
<p>To run the sample:</p>
<ol>
  <li>Open 'PhoneCallPricingDemo.mox' in Extend.</li>
  <li>Right-click on the 'Call Price' block and select 'Open Dialog'. On the 'Paths' tab, make sure the pathname of the Extend\Extensions directory is entered correctly.</li>
  <li>Play the model and watch the calls being priced.  </li>
</ol>
<!-- #EndEditable --> 
<hr>
<table width=100%>
<tr>
<td>
<img src="../images/logo_very_small.gif">
</td>
<td>
<h2 align="right">
<font size="2"><i>Copyright &copy;2005-7 <a href="http://www.amzi.com/">Amzi! inc.</a> All Rights Reserved.</i></font><br>
<font size="1"><i>ARulesXL and Amzi! are trademarks or registered trademarks of Amzi! <br>
Microsoft and Excel  are trademarks or registered trademarks of   Microsoft Corporation.</i></font></h2>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
